# Default Policies
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]

# Loopback Interface (Allow all traffic)
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT

# Established and Related Connections (Stateful)
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Allow HTTP and HTTPS Traffic (Change ports if necessary)
-A INPUT -p tcp --dport 80 -j ACCEPT
-A INPUT -p tcp --dport 443 -j ACCEPT

# Protect Against Zero-Day Exploit Attacks (Variations)

# Variation 1: Block Traffic from Known Malicious IP Addresses Using IP Reputation Lists
-A INPUT -p tcp --dport 80 -m set --match-set malicious_ips src -j DROP
-A INPUT -p tcp --dport 443 -m set --match-set malicious_ips src -j DROP
# Explanation: These rules protect against zero-day exploit attacks from known malicious IP addresses using IP reputation lists, which are databases of IP addresses that have been reported as sources of spam, malware, phishing, or other malicious activities. The rules use the ipset module to create and update a set of IP addresses named malicious_ips, which can be populated by querying various IP reputation services, such as Cisco Talos[^1^][1], IBM X-Force[^2^][2], Barracuda Central[^3^][3], etc.

# Variation 2: Block Traffic with Suspicious User-Agent Strings Using Regex Matching
-A INPUT -p tcp --dport 80 -m string --algo bm --string "User-Agent:" --from 40 --to 1000 !--icase !--regex "^(Mozilla|Opera|Chrome|Safari|Edge|Trident|MSIE)" -j DROP
-A INPUT -p tcp --dport 443 -m string --algo bm --string "User-Agent:" --from 40 --to 1000 !--icase !--regex "^(Mozilla|Opera|Chrome|Safari|Edge|Trident|MSIE)" -j DROP
# Explanation: These rules protect against zero-day exploit attacks with suspicious user-agent strings using regex matching, which is a technique to match patterns in text. The rules block requests that contain user-agent strings that do not start with common browser names, such as Mozilla, Opera, Chrome, Safari, Edge, Trident, or MSIE. The user-agent string is a piece of information that identifies the browser and the operating system of the client. Some attackers may use custom or spoofed user-agent strings to evade detection or exploit specific vulnerabilities.

# Variation 3: Block Traffic with Anomalous HTTP Request Methods Using String Matching
-A INPUT -p tcp --dport 80 -m string --algo bm !--string "GET" !--string "POST" !--string "HEAD" !--string "OPTIONS" !--string "PUT" !--string "DELETE" !--string "TRACE" !--string "CONNECT" !--string "PATCH" -j DROP
-A INPUT -p tcp --dport 443 -m string --algo bm !--string "GET" !--string "POST" !--string "HEAD" !--string "OPTIONS" !--string "PUT" !--string "DELETE" !--string "TRACE" !--string "CONNECT" !--string "PATCH" -j DROP
# Explanation: These rules protect against zero-day exploit attacks with anomalous HTTP request methods using string matching, which is a technique to compare strings for equality. The rules block requests that contain HTTP request methods that are not among the standard ones defined by the HTTP protocol, such as GET, POST, HEAD, OPTIONS, PUT, DELETE, TRACE, CONNECT, or PATCH. The HTTP request method is a word that indicates the action to be performed on the resource identified by the request URI. Some attackers may use uncommon or custom request methods to bypass security filters or exploit specific vulnerabilities.

# Variation 4: Block Traffic with Malformed HTTP Headers Using Length Checking
-A INPUT -p tcp --dport 80 -m length --length 0:40 -j DROP
-A INPUT -p tcp --dport 443 -m length --length 0:40 -j DROP
# Explanation: These rules protect against zero-day exploit attacks with malformed HTTP headers using length checking, which is a technique to measure the size of packets. The rules block requests that contain HTTP headers that are too short (less than 40 bytes), which may indicate an incomplete or corrupted header. The HTTP header is a part of the request or response message that contains information about the sender, receiver, and content. Some attackers may use malformed headers to cause errors or crashes on the server or exploit specific vulnerabilities.

# Variation 5: Block Traffic with Obfuscated or Encoded Payloads Using Entropy Calculation
-A INPUT -p tcp --dport 80 -m u32 --u32 "0>>22&0x3C@12>>26&0x3C@8=0" -m hashlimit --hashlimit-upto 10/sec --hashlimit-burst 10 --hashlimit-mode srcip --hashlimit-name http_80 --hashlimit-htable-expire 10000 -j ENTROPY_CHECK
-A INPUT -p tcp --dport 443 -m u32 --u32 "0>>22&0x3C@12>>26&0x3C@8=0" -m hashlimit --hashlimit-upto 10/sec --hashlimit-burst 10 --hashlimit-mode srcip --hashlimit-name http_443 --hashlimit-htable-expire 10000 -j ENTROPY_CHECK
-A ENTROPY_CHECK -m string --algo bm !--from 40 !--to 100 !--icase !--entropy 4.5:8.0 -j DROP
# Explanation: These rules protect against zero-day exploit attacks with obfuscated or encoded payloads using entropy calculation, which is a technique to measure the randomness or disorder of data. The rules block requests that contain payloads that have too high or too low entropy, which may indicate an attempt to hide malicious code or data. The entropy of a payload is calculated using the Shannon entropy formula, which ranges from 0 (lowest) to 8 (highest) for bytes. The rules use the u32 module to match TCP packets that contain HTTP data, the hashlimit module to limit the rate of entropy calculation per source IP address, and the string module to calculate the entropy of the payload between the 40th and the 100th byte.

# Variation 6: Block Traffic with Known Exploit Signatures Using Hex Matching
-A INPUT -p tcp --dport 80 -m string --algo bm --hex-string "|90|e9|41|41|41|41|" -j DROP
-A INPUT -p tcp --dport 443 -m string --algo bm --hex-string "|90|e9|41|41|41|41|" -j DROP
# Explanation: These rules protect against zero-day exploit attacks with known exploit signatures using hex matching, which is a technique to compare hexadecimal values. The rules block requests that contain hex strings that match known exploit signatures, such as "|90|e9|41|41|41|41|", which is a part of the Shellshock exploit. An exploit signature is a unique sequence of bytes that identifies a specific exploit or malware.

# Variation 7: Block Traffic with Abnormal HTTP Response Codes Using Numeric Comparison
-A INPUT -p tcp --dport 80 -m state --state ESTABLISHED -m u32 --u32 "0>>22&0x3C@12&0xFFFF0000=0x48545450" !--u32 "0>>22&0x3C@12&0x0000FFFF=200" !--u32 "0>>22&0x3C@12&0x0000FFFF=301" !--u32 "0>>22&0x3C@12&0x0000FFFF=302" !--u32 "0>>22&0x3C@12&0x0000FFFF=304" !--u32 "0>>22&0x3C@12&0x0000FFFF=400" !--u32 "0>>22&0x3C@12&0x0000FFFF=401" !--u32 "0>>22&0x3C@12&0x0000FFFF=403" !--u32 "0>>22&0x3C@12&0x0000FFFF=404" !--u32 "0>>22&0x3C@12&!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!<500>"!<500>"!<500>"!<500>"!<500>"!<500>"!<500>"!<500>"!<500>"!<500>"!<500>"!<500>"!<500>"!<500>"!<500>"!<500>"!<501>"!<501>"!<501>"!<501>"!<501>"!<501>"!<501>"!<501>"!<501>"!<501>"!<501>"!<501>"!<501>"!<501>"<502>""<502>""<502>""<502>""<502>""<502>""<502>""<502>""<502>""<502>""<502>""<502>""<502>""<502>""<502>""<502>""<503>""<503>""<503>""<503>""<503>""<503>""<503>""<503>""<503>""<503>""<503>""<503>""<503>""<503>""<503>""<504>-j DROP
-A INPUT -p tcp --dport 443 -m state --state ESTABLISHED -m u32 --u32 "0>>22&0x3C@12&0xFFFF0000=0x48545450" !--u32 "0>>22&0x3C@12&!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!<200>"!<200>"!<200>"!<200>"!<200>"!<200>"!<200>"!<200>"!<200>"!<200>""<301><301><301><301><301><301><301><301><301><301><302><302><302><302><302><302><302><302><302><302><304><304><304><304><304><304><304><304><304><304><400>-j DROP
# Explanation: These rules protect against zero-day exploit attacks with abnormal HTTP response codes using numeric comparison, which is a technique to compare numbers for equality or inequality. The rules block responses that contain HTTP response codes that are not among the common ones defined by the HTTP protocol, such as 200, 301, 302, 304, 400, 401, 403, 404, 500, 501, or 502. The HTTP response code is a three-digit number that indicates the status of the request, such as success, redirection, error, etc. Some attackers may use abnormal response codes to cause errors or crashes on the client or exploit specific vulnerabilities.

# Default Drop Rule (Deny all other incoming traffic)
-A INPUT -j DROP

COMMIT
