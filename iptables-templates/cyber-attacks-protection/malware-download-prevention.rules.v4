# Default Policies
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]

# Loopback Interface (Allow all traffic)
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT

# Established and Related Connections (Stateful)
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Allow HTTP and HTTPS Traffic (Change ports if necessary)
-A INPUT -p tcp --dport 80 -j ACCEPT
-A INPUT -p tcp --dport 443 -j ACCEPT

# Use Case 33: Protect Against Malware Download Attempts (Variations)

# Variation 1: Block Traffic with Known Malware Signatures Using Hex Matching
-A INPUT -p tcp --dport 80 -m string --algo bm --hex-string "|4D 5A|" !--hex-string "|50 45|" !--hex-string "|4E 45|" !--hex-string "|4C 45|" !--hex-string "|7F 45 4C 46|" !--hex-string "|25 50 44 46|" !--hex-string "|7B 5C 72!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!<74>"!<74>"!<74>"!<74>"!<74>"!<74>"!<74>"!<74>"!<74>"!<74>"!<74>"!<74>"!<74>"!<74>"<66><66><66><66><66><66><66><66><66><66><66><66><66><66><66><66>-j DROP
-A INPUT -p tcp --dport 443 -m string --algo bm --hex-string "|4D 5A|" !--hex-string "|50 45|" !--hex-string "|4E 45|" !--hex-string "|4C 45|" !--hex-string "|7F 45 4C 46|" !--hex-string "|25 50 44 46|" !--hex-string "|7B 5C 72|<74>""<74>""<74>""<74>""<74>""<74>""<74>""<74>""<74>""<74>""<74>""<74>""<74>""<74>""<66>""<66>""<66>""<66>""<66>""<66>""<66>""<66>""<66>""<66>""<66>""<66>""<66>""<66>-j DROP
# Explanation: These rules protect against malware download attempts with known malware signatures using hex matching, which is a technique to compare hexadecimal values. The rules block requests that contain hex strings that match known malware signatures, such as |4D|5A|, which is the magic number for executable files. The rules also exclude hex strings that match known file formats, such as |50|45| for PE files, |7F|45|4C|46| for ELF files, |25|50|44|46| for PDF files, etc. A malware signature is a unique sequence of bytes that identifies a specific malware or family of malware[^1^][1].

# Variation 2: Block Traffic with Suspicious File Extensions Using Regex Matching
-A INPUT -p tcp --dport 80 -m string --algo bm --string "." --from 40 --to 1000 !--icase !--regex "\.(exe|dll|bat|cmd|vbs|js|ps1|scr|pif|com)$" -j DROP
-A INPUT -p tcp --dport 443 -m string --algo bm --string "." --from 40 --to 1000 !--icase !--regex "\.(exe|dll|bat|cmd|vbs|js|ps1|scr|pif|com)$" -j DROP
# Explanation: These rules protect against malware download attempts with suspicious file extensions using regex matching, which is a technique to match patterns in text. The rules block requests that contain file extensions that are commonly used by malicious executables, such as .exe, .dll, .bat, .cmd, .vbs, .js, .ps1, .scr, .pif, or .com. The rules use the string module to match the dot character (.) between the 40th and the 1000th byte of the request, and the regex module to match the file extension at the end of the request[^2^][2].

# Variation 3: Block Traffic with Obfuscated or Encoded Payloads Using Entropy Calculation
-A INPUT -p tcp --dport 80 -m u32 --u32 "0>>22&0x3C@12>>26&0x3C@8=0" -m hashlimit --hashlimit-upto 10/sec --hashlimit-burst 10 --hashlimit-mode srcip --hashlimit-name http_80 --hashlimit-htable-expire 10000 -j ENTROPY_CHECK
-A INPUT -p tcp --dport 443 -m u32 --u32 "0>>22&0x3C@12>>26&0x3C@8=0" -m hashlimit --hashlimit-upto 10/sec --hashlimit-burst 10 --hashlimit-mode srcip --hashlimit-name http_443 --hashlimit-htable-expire 10000 -j ENTROPY_CHECK
-A ENTROPY_CHECK -m string --algo bm !--from 40 !--to 100 !--icase !--entropy 4.5:8.0 -j DROP
# Explanation: These rules protect against malware download attempts with obfuscated or encoded payloads using entropy calculation, which is a technique to measure the randomness or disorder of data. The rules block requests that contain payloads that have too high or too low entropy, which may indicate an attempt to hide malicious code or data. The entropy of a payload is calculated using the Shannon entropy formula, which ranges from 0 (lowest) to 8 (highest) for bytes. The rules use the u32 module to match TCP packets that contain HTTP data, the hashlimit module to limit the rate of entropy calculation per source IP address, and the string module to calculate the entropy of the payload between the 40th and the 100th byte[^3^][3].

# Variation 4: Block Traffic with Known Exploit Signatures Using Hex Matching
-A INPUT -p tcp --dport 80 -m string --algo bm --hex-string "|90|e9|41|41|41|41|" -j DROP
-A INPUT -p tcp --dport 443 -m string --algo bm --hex-string "|90|e9|41|41|41|41|" -j DROP
# Explanation: These rules protect against malware download attempts with known exploit signatures using hex matching, which is a technique to compare hexadecimal values. The rules block requests that contain hex strings that match known exploit signatures, such as "|90|e9|41|41|41|41|", which is a part of the Shellshock exploit. An exploit signature is a unique sequence of bytes that identifies a specific exploit or malware.

# Variation 5: Block Traffic with Suspicious Content-Type Headers Using String Matching
-A INPUT -p tcp --dport 80 -m string --algo bm --string "Content-Type:" !--string "text/html" !--string "text/css" !--string "text/javascript" !--string "application/json" !--string "application/xml" !--string "image/jpeg" !--string "image/png" !--string "image/gif" !--string "audio/mpeg" !--string "video/mp4" -j DROP
-A INPUT -p tcp --dport 443 -m string --algo bm --string "Content-Type:" !--string "text/html" !--string "text/css" !--string "text/javascript" !--string "application/json" !--string "application/xml" !--string "image/jpeg" !--string "image/png" !--string "image/gif" !--string "audio/mpeg" !--string "video/mp4" -j DROP
# Explanation: These rules protect against malware download attempts with suspicious content-type headers using string matching, which is a technique to compare strings for equality. The rules block requests that contain content-type headers that are not among the common ones used by web applications, such as text/html, text/css, text/javascript, application/json, application/xml, image/jpeg, image/png, image/gif, audio/mpeg, or video/mp4. The content-type header is a part of the HTTP message that indicates the media type of the content.

# Variation 6: Block Traffic with Anomalous HTTP Request Methods Using String Matching
-A INPUT -p tcp --dport 80 -m string --algo bm !--string "GET" !--string "POST" !--string "HEAD" !--string "OPTIONS" !--string "PUT" !--string "DELETE" !--string "TRACE" !--string "CONNECT" !--string "PATCH" -j DROP
-A INPUT -p tcp --dport 443 -m string --algo bm !--string "GET" !--string "POST" !--string "HEAD" !--string "OPTIONS" !--string "PUT" !--string "DELETE" !--string "TRACE" !--string "CONNECT" !--string "PATCH" -j DROP
# Explanation: These rules protect against malware download attempts with anomalous HTTP request methods using string matching, which is a technique to compare strings for equality or inequality. The rules block requests that contain HTTP request methods that are not among the standard ones defined by the HTTP protocol, such as GET, POST, HEAD, OPTIONS, PUT, DELETE, TRACE, CONNECT, or PATCH. The HTTP request method is a word that indicates the action to be performed on the resource identified by the request URI. Some attackers may use uncommon or custom request methods to bypass security filters or exploit specific vulnerabilities.

# Variation 7: Block Traffic with Abnormal HTTP Response Codes Using Numeric Comparison
-A INPUT -p tcp --dport 80 -m state --state ESTABLISHED -m u32 --u32 "0>>22&0x3C@12&0xFFFF0000=0x48545450" !--u32 "0>>22&0x3C@12&0x0000FFFF=200" !--u32 "0>>22&0x3C@12&0x0000FFFF=301" !--u32 "0>>22&0x3C@12&0x0000FFFF=302" !--u32 "0>>22&0x3C@12&0x0000FFFF=304" !--u32 "0>>22&0x3C@12&0x0000FFFF=400" !--u32 "0>>22&0x3C@12&!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!<401>"!<401>"!<401>"!<401>"!<401>"!<401>"!<401>"!<401>"!<401>"!<401>"!<403><403><403><403><403><403><403><403><403><403><404>-j DROP
-A INPUT -p tcp --dport 443 -m state --state ESTABLISHED -m u32 --u32 "0>>22&0x3C@12&0xFFFF0000=0x48545450" !--u32 "0>>22&0x3C@12&!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!<200>"!<200>"!<200>"!<200>"!<200>"!<200>"!<200>"!<200>"<301>""<301>""<301>""<301>""<301>""<301>""<301>""<301>""<302>""<302>""<302>""<302>""<302>""<302>""<302>""<302>""<304>""<304>""<304>""<304>""<304>""<304>""<304>""<304>""<400>-j DROP
# Explanation: These rules protect against malware download attempts with abnormal HTTP response codes using numeric comparison, which is a technique to compare numbers for equality or inequality. The rules block responses that contain HTTP response codes that are not among the common ones defined by the HTTP protocol, such as 200, 301, 302, 304, 400, 401, 403, or 404. The HTTP response code is a three-digit number that indicates the status of the request, such as success, redirection, error, etc. Some attackers may use abnormal response codes to cause errors or crashes on the client or exploit specific vulnerabilities.

# Default Drop Rule (Deny all other incoming traffic)
-A INPUT -j DROP

COMMIT

